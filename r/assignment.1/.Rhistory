y <- 10
f <- function(x) {}
f <- function(x) {
y <- 2
y^2 + g(x)
}
f <- function(x) {
x*y
}
f(3)
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
library(plyr)
library(ggplot2)
library(reshape2)
setwd('/home/serg/projects/advprogramming/bigdata/r/assignment.1/')
vehicles <- read.csv("vehicles.csv", stringsAsFactors = F)
# head(vehicles)
labels <- do.call(rbind, strsplit(readLines("data.passport.txt")," - "))
class(labels) # matrix
labels <- data.frame(labels)
# class(labels) # data.frame
# labels <- read.table("data.passport.txt",	sep	=	"-", header = F)
names(labels) <- c("label", "description")
# head(labels)
nrow(vehicles) # 37936
ncol(vehicles) # 83
names(vehicles)
length(unique(vehicles[,"year"]))	# 34
ncol(vehicles) == ncol(labels) # FALSE
min(vehicles[,"year"]) # 1984
max(vehicles[,"year"]) # 2017
unique(vehicles[, "fuelType1"])
mpgByYrM	<-	ddply(
ggplot()
ggplot()
library(ggplot2)
mpgByYr <- ddply(
ggplot(mpgByYr,	aes(year, avgMPG)) + geom_point() + geom_smooth() + xlab("Year") + ylab("Average MPG") + ggtitle("All cars")
mpgByYr <- ddply(
mpgByYr <- ddply(
)
mpgByYr <- ddply(
vehicles,
~year,
summarise,
avgMPG	=	mean(comb08),
avgHghy	=	mean(highway08),
avgCity	=	mean(city08),
avgCo2  = mean(co2TailpipeGpm),
avgBar  = mean(barrels08)
)
ggplot(mpgByYr,	aes(year, avgMPG)) + geom_point() + geom_smooth() + xlab("Year") + ylab("Average MPG") + ggtitle("All cars")
mpgByYrA	<-	ddply(
subset(vehicles, vehicles$trany2 == "Auto"),
~year,
summarise,
avgMPG	=	mean(comb08),
avgHghy	=	mean(highway08),
avgCity	=	mean(city08),
avgCo2 = mean(co2TailpipeGpm),
avgScore = mean(feScore),
avgBar  = mean(barrels08)
)
mpgByYrM	<-	ddply(
subset(vehicles, vehicles$trany2 != "Auto"),
~year,
summarise,
avgMPG	=	mean(comb08),
avgHghy	=	mean(highway08),
avgCity	=	mean(city08),
avgCo2 = mean(co2TailpipeGpm),
avgScore = mean(feScore),
avgBar  = mean(barrels08)
)
ggplot()
+ geom_point(data = mpgByYrM, aes(year, avgMPG))
+ geom_smooth(data = mpgByYrM, aes(year, avgMPG, color = "red"))
+ geom_point(data = mpgByYrA, aes(year, avgMPG))
+ geom_smooth(data = mpgByYrA, aes(year, avgMPG, color = "blue"))
+ xlab("Year") + ylab("Average MPG") + ggtitle("All cars")
ggplot()
+ geom_point(data = mpgByYrM, aes(year, avgMPG))
+ geom_smooth(data = mpgByYrM, aes(year, avgMPG, color = "red"))
+ geom_point(data = mpgByYrA, aes(year, avgMPG))
+ geom_smooth(data = mpgByYrA, aes(year, avgMPG, color = "blue"))
+ xlab("Year") + ylab("Average MPG") + ggtitle("All cars")
ggplot() + geom_point(data = mpgByYrM, aes(year, avgMPG)) + geom_smooth(data = mpgByYrM, aes(year, avgMPG, color = "red")) + geom_point(data = mpgByYrA, aes(year, avgMPG)) + geom_smooth(data = mpgByYrA, aes(year, avgMPG, color = "blue")) + xlab("Year") + ylab("Average MPG") + ggtitle("All cars")
ggplot() + geom_point(data = mpgByYrM, aes(year, avgMPG)) + geom_smooth(data = mpgByYrM, aes(year, avgMPG, color = "red")) + geom_point(data = mpgByYrA, aes(year, avgMPG)) + geom_smooth(data = mpgByYrA, aes(year, avgMPG, color = "blue")) + xlab("Year") + ylab("Average MPG") + ggtitle("All cars")
setwd('/home/serg/projects/advprogramming/bigdata/r/assignment.1/')
customer <- read.csv("customer.csv", header = TRUE)
# head(customer)
# str(customer)
# "euclidean", "maximum", "manhattan", "canberra", "binary" or "minkowski"
scaled <- scale(customer[,-1])
hc <- hclust(dist(scaled, method = "euclidean"), method = "ward.D2")
plot(hc, hang = -0.01, cex = 0.7)
hc2 <- hclust(dist(scaled, method = "euclidean"), method = "single")
plot(hc2, hang = -0.01, cex = 0.7)
set.seed(22)
fit <- kmeans(customer, 4)
# fit
plot(customer, col = fit$cluster)
plot(customer[, c("Sex", "Age")], col = fit$cluster)
library(fpc)
single_c <- hclust(dist(customer), method="single")
hc_single <- cutree(single_c, k = 4)
complete_c <- hclust(dist(customer), method="complete")
hc_complete <- cutree(complete_c, k = 4)
set.seed(22)
km <- kmeans(customer, 4)
cs <- cluster.stats(dist(customer), km$cluster)
cs[c("within.cluster.ss","avg.silwidth")]
sapply(list(kmeans = km$cluster, hc_single = hc_single,
hc_complete = hc_complete), function(c)
cluster.stats(dist(customer), c)[c("within.cluster.ss","avg.silwidth")])
nk <- 2:10
set.seed(22)
WSS <- sapply(nk, function(k) {kmeans(customer, centers=k)$tot.withinss })
plot(nk, WSS, type = "l", xlab = "number of k", ylab = "within sum of squares")
# silhouette width
SW <- sapply(nk, function(k) { cluster.stats(dist(customer), kmeans(customer, centers=k)$cluster)$avg.silwidth})
# SW
# plot it
plot(nk, SW, type = "l", xlab = "number of clusters", ylab = "average silhouette width")
customer <- scale(customer[,-1])
hc <- hclust(dist(scaled, method = "euclidean"), method = "ward.D2")
plot(hc, hang = -0.01, cex = 0.7)
hc2 <- hclust(dist(scaled, method = "euclidean"), method = "single")
plot(hc2, hang = -0.01, cex = 0.7)
fit <- cutree(hc, k = 4)
fit2 <- cutree(hc2, k = 4)
# table(fit)
# fit
# 1  2  3  4
# 11  8 16 25
plot(hc)
rect.hclust(hc, k = 4 , border="red")
# rect.hclust(hc, k = 4 , which = 2, border = "red")
# plot(hc2)
# rect.hclust(hc2, k = 4 , border="red")
# rect.hclust(hc2, k = 4 , which = 2, border = "red")
# set some arbitrarily chosen seed
set.seed(22)
fit <- kmeans(customer, 4)
# fit
plot(customer, col = fit$cluster)
plot(customer[, c("Sex", "Age")], col = fit$cluster)
# gfortran, liblapack-dev required
# install.packages("fpc")
library(fpc)
single_c <- hclust(dist(customer), method="single")
hc_single <- cutree(single_c, k = 4)
complete_c <- hclust(dist(customer), method="complete")
hc_complete <- cutree(complete_c, k = 4)
set.seed(22)
km <- kmeans(customer, 4)
cs <- cluster.stats(dist(customer), km$cluster)
cs[c("within.cluster.ss","avg.silwidth")]
sapply(list(kmeans = km$cluster, hc_single = hc_single,
hc_complete = hc_complete), function(c)
cluster.stats(dist(customer), c)[c("within.cluster.ss","avg.silwidth")])
nk <- 2:10
set.seed(22)
WSS <- sapply(nk, function(k) {kmeans(customer, centers=k)$tot.withinss })
# WSS
# plot it
plot(nk, WSS, type = "l", xlab = "number of k", ylab = "within sum of squares")
# silhouette width
SW <- sapply(nk, function(k) { cluster.stats(dist(customer), kmeans(customer, centers=k)$cluster)$avg.silwidth})
# SW
# plot it
plot(nk, SW, type = "l", xlab = "number of clusters", ylab = "average silhouette width")
